class Solution {
    public int recur (int index , int target , int[] coins , int[][] dp) {
         if (index == 0) {
            if(target == 0 || target % coins[index] == 0)
              return 1;
            else
              return 0;
         } 

         if(dp[index][target] != -1)
           return dp[index][target];

         int notTake = recur(index - 1 , target , coins , dp);
         int take = 0;
         if(target >= coins[index])
           take = recur(index , target - coins[index] , coins , dp);

         return dp[index][target] = notTake + take;
    }
    public int change(int amount, int[] coins) {
        int n = coins.length;
        int dp[][] = new int[n][amount + 1];
        for(int arr[] : dp)
           Arrays.fill(arr , -1);
        return recur(n - 1 , amount , coins , dp);
    }
}
